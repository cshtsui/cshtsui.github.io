/*
 * BUILD @athena/forge-toast v0.2.2
 * THIS IS AN AUTOGENERATED FILE
 */
/**
 *
 * This file compiles to sass/abstracts/_inline-svg.scss
 *
 * It uses a plugin called gulp-base64-inline (https://github.com/goschevski/gulp-base64-inline)
 *
 **/
.fe_f_all .fe_c_screen-reader-text {
  position: absolute;
  width: 1px;
  height: 1px;
  margin: -1px;
  border: 0;
  padding: 0;
  white-space: nowrap;
  clip-path: inset(100%);
  clip: rect(0 0 0 0);
  overflow: hidden;
}

.fe_f_all .fe_c_toast {
  background: white;
  border: 1px solid #d9d9d9;
  box-shadow: 0 1px 12px 0 rgba(0, 0, 0, 0.4);
  display: flex;
  position: relative;
  width: 375px;
}

.fe_f_all .fe_c_toast__wrapper {
  display: flex;
  flex-grow: 1;
  max-height: 105px;
}

.fe_f_all .fe_c_toast::before {
  bottom: 0;
  content: '';
  display: block;
  left: 0;
  position: absolute;
  top: 0;
  width: 10px;
}

.fe_f_all .fe_c_toast__header {
  margin-bottom: 8px;
}

.fe_f_all .fe_c_toast.fe_c_toast--attention::before {
  background-color: #e1b004;
}

.fe_f_all .fe_c_toast.fe_c_toast--attention .fe_c_toast__header {
  color: #5f5f5f;
}

.fe_f_all .fe_c_toast.fe_c_toast--success::before {
  background-color: #3d957d;
}

.fe_f_all .fe_c_toast.fe_c_toast--success .fe_c_toast__header {
  color: #3d957d;
}

.fe_f_all .fe_c_toast.fe_c_toast--info::before {
  background-color: #7e589b;
}

.fe_f_all .fe_c_toast.fe_c_toast--info .fe_c_toast__header {
  color: #7e589b;
}

.fe_f_all .fe_c_toast__content {
  color: #5f5f5f;
  flex-grow: 1;
  margin: 16px 16px 16px 0;
  overflow: hidden;
}

.fe_f_all .fe_c_toast__icon {
  margin: 16px 16px 16px 26px;
}

.fe_f_all .fe_c_toast__actions {
  display: flex;
  flex-direction: column;
}

.fe_f_all .fe_c_toast__dismiss-button,
.fe_f_all .fe_c_toast__action-button {
  -webkit-appearance: none;
  appearance: none;
  background: none;
  border-bottom: none;
  border-left: 1px solid #d9d9d9;
  border-right: none;
  border-top: none;
  color: #0275d4;
  cursor: pointer;
  flex-grow: 1;
  max-width: 125px;
  overflow: hidden;
  padding: 8px 16px;
  text-align: center;
  transition: box-shadow 0.5s, border-color 0.25s, background-color 0.25s, color 0.25s, fill 0.25s, stroke 0.25s;
  user-select: none;
  white-space: nowrap;
}

.fe_f_all .fe_c_toast__dismiss-button:hover,
.fe_f_all .fe_c_toast__action-button:hover {
  background: #d9ebfa;
  color: #005496;
}

.fe_f_all .fe_c_toast__dismiss-button:active,
.fe_f_all .fe_c_toast__action-button:active {
  background: #043961;
  color: white;
}

.fe_f_all .fe_c_toast__dismiss-button:focus,
.fe_f_all .fe_c_toast__action-button:focus {
  box-shadow: 0 0 0 3px #d9ebfa;
  z-index: 1;
}

.fe_f_all .fe_c_toast__dismiss-button {
  border-bottom: 1px solid #d9d9d9;
}

.fe_f_all .fe_c_toast__dismiss-icon {
  margin: 16px;
}

.fe_c_toast-portal {
  position: absolute;
  bottom: 24px;
  left: 8px;
}

.fe_c_toast-portal .fe_c_toast {
  transition: left cubic-bezier(0.215, 0.61, 0.355, 1) 300ms, opacity 200ms;
  left: 0;
}

.fe_c_toast-portal .fe_c_toast.fe_is-enter {
  left: -389px;
}

.fe_c_toast-portal .fe_c_toast.fe_is-exit-slow {
  opacity: 0;
  transition: opacity 3000ms;
}

.fe_c_toast-portal .fe_c_toast.fe_is-exit-fast {
  opacity: 0;
  transition: opacity 200ms;
}

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */

/*
 * BUILD @athena/forge-toggle-switch v0.1.1
 * THIS IS AN AUTOGENERATED FILE
 */
/**
 *
 * This file compiles to sass/abstracts/_inline-svg.scss
 *
 * It uses a plugin called gulp-base64-inline (https://github.com/goschevski/gulp-base64-inline)
 *
 **/
.fe_f_all {
  /* Default state */
}

.fe_f_all .fe_c_toggle-switch {
  align-items: center;
  display: inline-flex;
  margin-top: 10px;
  /* Mobile state */
  /* Mobile state, checked */
  /* Checked state */
  /* Error state */
  /* Has error and is checked */
  /* Disabled state */
  /* Disabled and checked state */
  /* When descriptionPosition = left */
}

.fe_f_all .fe_c_toggle-switch.fe_is-required.fe_c_form-field__input {
  position: relative;
  padding-left: 12.66667px;
}

.fe_f_all .fe_c_toggle-switch.fe_is-required.fe_c_form-field__input::before {
  content: '';
  position: absolute;
  border-left: 6px solid #0275d4;
  top: 6.66667px;
  bottom: 6.66667px;
  left: 0;
}

.fe_f_all .fe_c_toggle-switch.fe_is-required.fe_c_form-field__input.fe_is-error::before {
  border-color: #e1b004;
}

.fe_f_all .fe_c_toggle-switch.fe_is-required.fe_c_form-field__input::before {
  bottom: 0;
  top: 0;
}

.fe_f_all .fe_c_toggle-switch__track {
  background: white;
  border: 1px solid #b3b3b3;
  border-radius: 24px;
  cursor: pointer;
  height: 24px;
  position: relative;
  transition: background 200ms, border 200ms;
  width: 48px;
}

.fe_f_all .fe_c_toggle-switch__track:focus {
  box-shadow: 0 0 0 1px white, 0 0 3px 3px rgba(2, 117, 212, 0.8);
  outline: none;
}

.fe_f_all .fe_c_toggle-switch__track:hover {
  box-shadow: 0 0 0 1px #0275d4;
}

.fe_f_all .fe_c_toggle-switch__track:hover:focus {
  box-shadow: 0 0 0 1px #0275d4, 0 0 0 1px white, 0 0 3px 3px rgba(2, 117, 212, 0.8);
}

.fe_f_all .fe_c_toggle-switch__toggle {
  background: #b3b3b3;
  border-radius: 50%;
  height: 18px;
  left: 2px;
  position: absolute;
  top: 2px;
  transition: left 200ms cubic-bezier(0.42, 0, 0.58, 1), background 200ms;
  width: 18px;
}

.fe_f_all .fe_c_toggle-switch__descriptions {
  margin: 0 0 0 8px;
}

.fe_f_all .fe_c_toggle-switch--large {
  margin-top: 6.66667px;
}

.fe_f_all .fe_c_toggle-switch--large .fe_c_toggle-switch__track {
  height: 30px;
  width: 56px;
}

.fe_f_all .fe_c_toggle-switch--large .fe_c_toggle-switch__toggle {
  height: 24px;
  width: 24px;
}

.fe_f_all .fe_c_toggle-switch--large.fe_c_toggle-switch--checked .fe_c_toggle-switch__toggle {
  left: 28px;
}

.fe_f_all .fe_c_toggle-switch--checked .fe_c_toggle-switch__track {
  background: #0275d4;
  border: 1px solid #0275d4;
}

.fe_f_all .fe_c_toggle-switch--checked .fe_c_toggle-switch__toggle {
  background: white;
  left: 26px;
}

.fe_f_all .fe_c_toggle-switch.fe_is-error .fe_c_toggle-switch__track {
  border: 1px solid #e1b004;
}

.fe_f_all .fe_c_toggle-switch.fe_is-error .fe_c_toggle-switch__track:hover {
  box-shadow: 0 0 0 1px #e1b004;
}

.fe_f_all .fe_c_toggle-switch.fe_is-error .fe_c_toggle-switch__track:hover:focus {
  box-shadow: 0 0 0 1px #e1b004, 0 0 0 1px white, 0 0 3px 3px rgba(2, 117, 212, 0.8);
}

.fe_f_all .fe_c_toggle-switch.fe_is-error.fe_c_toggle-switch--checked .fe_c_toggle-switch__track {
  background: #e1b004;
}

.fe_f_all .fe_c_toggle-switch.fe_is-error.fe_c_toggle-switch--checked .fe_c_toggle-switch__toggle {
  background: white;
}

.fe_f_all .fe_c_toggle-switch--disabled .fe_c_toggle-switch__track, .fe_f_all .fe_c_toggle-switch--disabled.fe_is-error .fe_c_toggle-switch__track {
  border: 1px solid #d9d9d9;
  cursor: not-allowed;
}

.fe_f_all .fe_c_toggle-switch--disabled .fe_c_toggle-switch__track:hover, .fe_f_all .fe_c_toggle-switch--disabled.fe_is-error .fe_c_toggle-switch__track:hover {
  box-shadow: none;
}

.fe_f_all .fe_c_toggle-switch--disabled .fe_c_toggle-switch__toggle, .fe_f_all .fe_c_toggle-switch--disabled.fe_is-error .fe_c_toggle-switch__toggle {
  background: #d9d9d9;
}

.fe_f_all .fe_c_toggle-switch--disabled.fe_c_toggle-switch--checked .fe_c_toggle-switch__track, .fe_f_all .fe_c_toggle-switch--disabled.fe_c_toggle-switch--checked.fe_is-error .fe_c_toggle-switch__track {
  background: #d9d9d9;
}

.fe_f_all .fe_c_toggle-switch--disabled.fe_c_toggle-switch--checked .fe_c_toggle-switch__toggle, .fe_f_all .fe_c_toggle-switch--disabled.fe_c_toggle-switch--checked.fe_is-error .fe_c_toggle-switch__toggle {
  background: white;
}

.fe_f_all .fe_c_toggle-switch--left-description {
  flex-direction: row-reverse;
}

.fe_f_all .fe_c_toggle-switch--left-description .fe_c_toggle-switch__descriptions {
  margin: 0 8px 0 0;
}

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
