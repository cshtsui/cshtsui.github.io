/*
 * BUILD @athena/forge-toast v0.2.3
 * THIS IS AN AUTOGENERATED FILE
 */
/**
 *
 * This file compiles to sass/abstracts/_inline-svg.scss
 *
 * It uses a plugin called gulp-base64-inline (https://github.com/goschevski/gulp-base64-inline)
 *
 **/
.fe_f_all .fe_c_screen-reader-text {
  position: absolute;
  width: 1px;
  height: 1px;
  margin: -1px;
  border: 0;
  padding: 0;
  white-space: nowrap;
  clip-path: inset(100%);
  clip: rect(0 0 0 0);
  overflow: hidden;
}

.fe_f_all .fe_c_toast {
  background: white;
  border: 1px solid #d9d9d9;
  box-shadow: 0 1px 12px 0 rgba(0, 0, 0, 0.4);
  display: flex;
  position: relative;
  width: 375px;
}

.fe_f_all .fe_c_toast__wrapper {
  display: flex;
  flex-grow: 1;
  max-height: 105px;
}

.fe_f_all .fe_c_toast::before {
  bottom: 0;
  content: '';
  display: block;
  left: 0;
  position: absolute;
  top: 0;
  width: 10px;
}

.fe_f_all .fe_c_toast__header {
  margin-bottom: 8px;
}

.fe_f_all .fe_c_toast.fe_c_toast--attention::before {
  background-color: #ffab00;
}

.fe_f_all .fe_c_toast.fe_c_toast--attention .fe_c_toast__header {
  color: #5f5f5f;
}

.fe_f_all .fe_c_toast.fe_c_toast--success::before {
  background-color: #3d957d;
}

.fe_f_all .fe_c_toast.fe_c_toast--success .fe_c_toast__header {
  color: #3d957d;
}

.fe_f_all .fe_c_toast.fe_c_toast--info::before {
  background-color: #7e589b;
}

.fe_f_all .fe_c_toast.fe_c_toast--info .fe_c_toast__header {
  color: #7e589b;
}

.fe_f_all .fe_c_toast__content {
  color: #5f5f5f;
  flex-grow: 1;
  margin: 16px 16px 16px 0;
  overflow: hidden;
}

.fe_f_all .fe_c_toast__icon {
  margin: 16px 16px 16px 26px;
}

.fe_f_all .fe_c_toast__actions {
  display: flex;
  flex-direction: column;
}

.fe_f_all .fe_c_toast__dismiss-button,
.fe_f_all .fe_c_toast__action-button {
  -webkit-appearance: none;
  appearance: none;
  background: none;
  border-bottom: none;
  border-left: 1px solid #d9d9d9;
  border-right: none;
  border-top: none;
  color: #0275d4;
  cursor: pointer;
  flex-grow: 1;
  max-width: 125px;
  overflow: hidden;
  padding: 8px 16px;
  text-align: center;
  transition: box-shadow 0.5s, border-color 0.25s, background-color 0.25s, color 0.25s, fill 0.25s, stroke 0.25s;
  user-select: none;
  white-space: nowrap;
}

.fe_f_all .fe_c_toast__dismiss-button:hover,
.fe_f_all .fe_c_toast__action-button:hover {
  background: #d9ebfa;
  color: #005496;
}

.fe_f_all .fe_c_toast__dismiss-button:active,
.fe_f_all .fe_c_toast__action-button:active {
  background: #043961;
  color: white;
}

.fe_f_all .fe_c_toast__dismiss-button:focus,
.fe_f_all .fe_c_toast__action-button:focus {
  box-shadow: 0 0 0 3px #d9ebfa;
  z-index: 1;
}

.fe_f_all .fe_c_toast__dismiss-button {
  border-bottom: 1px solid #d9d9d9;
}

.fe_f_all .fe_c_toast__dismiss-icon {
  margin: 16px;
}

.fe_c_toast-portal {
  position: absolute;
  bottom: 24px;
  left: 8px;
}

.fe_c_toast-portal .fe_c_toast {
  transition: left cubic-bezier(0.215, 0.61, 0.355, 1) 300ms, opacity 200ms;
  left: 0;
}

.fe_c_toast-portal .fe_c_toast.fe_is-enter {
  left: -389px;
}

.fe_c_toast-portal .fe_c_toast.fe_is-exit-slow {
  opacity: 0;
  transition: opacity 3000ms;
}

.fe_c_toast-portal .fe_c_toast.fe_is-exit-fast {
  opacity: 0;
  transition: opacity 200ms;
}

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */

/*
 * BUILD @athena/forge-toggle-switch v0.1.2
 * THIS IS AN AUTOGENERATED FILE
 */
/**
 *
 * This file compiles to sass/abstracts/_inline-svg.scss
 *
 * It uses a plugin called gulp-base64-inline (https://github.com/goschevski/gulp-base64-inline)
 *
 **/
.fe_f_all {
  /* Default state */
}

.fe_f_all .fe_c_toggle-switch {
  align-items: center;
  display: inline-flex;
  margin-top: 10px;
  /* Mobile state */
  /* Mobile state, checked */
  /* Checked state */
  /* Error state */
  /* Has error and is checked */
  /* Disabled state */
  /* Disabled and checked state */
  /* When descriptionPosition = left */
}

.fe_f_all .fe_c_toggle-switch.fe_is-required.fe_c_form-field__input {
  position: relative;
  padding-left: 12.66667px;
}

.fe_f_all .fe_c_toggle-switch.fe_is-required.fe_c_form-field__input::before {
  content: '';
  position: absolute;
  border-left: 6px solid #0275d4;
  top: 6.66667px;
  bottom: 6.66667px;
  left: 0;
}

.fe_f_all .fe_c_toggle-switch.fe_is-required.fe_c_form-field__input.fe_is-error::before {
  border-color: #ffab00;
}

.fe_f_all .fe_c_toggle-switch.fe_is-required.fe_c_form-field__input::before {
  bottom: 0;
  top: 0;
}

.fe_f_all .fe_c_toggle-switch__track {
  background: white;
  border: 1px solid #b3b3b3;
  border-radius: 24px;
  cursor: pointer;
  height: 24px;
  position: relative;
  transition: background 200ms, border 200ms;
  width: 48px;
}

.fe_f_all .fe_c_toggle-switch__track:focus {
  box-shadow: 0 0 0 1px white, 0 0 3px 3px rgba(2, 117, 212, 0.8);
  outline: none;
}

.fe_f_all .fe_c_toggle-switch__track:hover {
  box-shadow: 0 0 0 1px #0275d4;
}

.fe_f_all .fe_c_toggle-switch__track:hover:focus {
  box-shadow: 0 0 0 1px #0275d4, 0 0 0 1px white, 0 0 3px 3px rgba(2, 117, 212, 0.8);
}

.fe_f_all .fe_c_toggle-switch__toggle {
  background: #b3b3b3;
  border-radius: 50%;
  height: 18px;
  left: 2px;
  position: absolute;
  top: 2px;
  transition: left 200ms cubic-bezier(0.42, 0, 0.58, 1), background 200ms;
  width: 18px;
}

.fe_f_all .fe_c_toggle-switch__descriptions {
  margin: 0 0 0 8px;
}

.fe_f_all .fe_c_toggle-switch--large {
  margin-top: 6.66667px;
}

.fe_f_all .fe_c_toggle-switch--large .fe_c_toggle-switch__track {
  height: 30px;
  width: 56px;
}

.fe_f_all .fe_c_toggle-switch--large .fe_c_toggle-switch__toggle {
  height: 24px;
  width: 24px;
}

.fe_f_all .fe_c_toggle-switch--large.fe_c_toggle-switch--checked .fe_c_toggle-switch__toggle {
  left: 28px;
}

.fe_f_all .fe_c_toggle-switch--checked .fe_c_toggle-switch__track {
  background: #0275d4;
  border: 1px solid #0275d4;
}

.fe_f_all .fe_c_toggle-switch--checked .fe_c_toggle-switch__toggle {
  background: white;
  left: 26px;
}

.fe_f_all .fe_c_toggle-switch.fe_is-error .fe_c_toggle-switch__track {
  border: 1px solid #ffab00;
}

.fe_f_all .fe_c_toggle-switch.fe_is-error .fe_c_toggle-switch__track:hover {
  box-shadow: 0 0 0 1px #ffab00;
}

.fe_f_all .fe_c_toggle-switch.fe_is-error .fe_c_toggle-switch__track:hover:focus {
  box-shadow: 0 0 0 1px #ffab00, 0 0 0 1px white, 0 0 3px 3px rgba(2, 117, 212, 0.8);
}

.fe_f_all .fe_c_toggle-switch.fe_is-error.fe_c_toggle-switch--checked .fe_c_toggle-switch__track {
  background: #ffab00;
}

.fe_f_all .fe_c_toggle-switch.fe_is-error.fe_c_toggle-switch--checked .fe_c_toggle-switch__toggle {
  background: white;
}

.fe_f_all .fe_c_toggle-switch--disabled .fe_c_toggle-switch__track, .fe_f_all .fe_c_toggle-switch--disabled.fe_is-error .fe_c_toggle-switch__track {
  border: 1px solid #d9d9d9;
  cursor: not-allowed;
}

.fe_f_all .fe_c_toggle-switch--disabled .fe_c_toggle-switch__track:hover, .fe_f_all .fe_c_toggle-switch--disabled.fe_is-error .fe_c_toggle-switch__track:hover {
  box-shadow: none;
}

.fe_f_all .fe_c_toggle-switch--disabled .fe_c_toggle-switch__toggle, .fe_f_all .fe_c_toggle-switch--disabled.fe_is-error .fe_c_toggle-switch__toggle {
  background: #d9d9d9;
}

.fe_f_all .fe_c_toggle-switch--disabled.fe_c_toggle-switch--checked .fe_c_toggle-switch__track, .fe_f_all .fe_c_toggle-switch--disabled.fe_c_toggle-switch--checked.fe_is-error .fe_c_toggle-switch__track {
  background: #d9d9d9;
}

.fe_f_all .fe_c_toggle-switch--disabled.fe_c_toggle-switch--checked .fe_c_toggle-switch__toggle, .fe_f_all .fe_c_toggle-switch--disabled.fe_c_toggle-switch--checked.fe_is-error .fe_c_toggle-switch__toggle {
  background: white;
}

.fe_f_all .fe_c_toggle-switch--left-description {
  flex-direction: row-reverse;
}

.fe_f_all .fe_c_toggle-switch--left-description .fe_c_toggle-switch__descriptions {
  margin: 0 8px 0 0;
}

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */

/*
 * BUILD @athena/forge-multiselect-async v0.1.4
 * THIS IS AN AUTOGENERATED FILE
 */
/**
 *
 * This file compiles to sass/abstracts/_inline-svg.scss
 *
 * It uses a plugin called gulp-base64-inline (https://github.com/goschevski/gulp-base64-inline)
 *
 **/
.fe_f_all .fe_c_multiselect {
  position: relative;
  display: inline-block;
}

.fe_f_all .fe_c_multiselect input::-webkit-contacts-auto-fill-button,
.fe_f_all .fe_c_multiselect input::-webkit-credentials-auto-fill-button {
  display: none !important;
}

.fe_f_all .fe_c_multiselect input::-ms-clear {
  display: none !important;
}

.fe_f_all .fe_c_multiselect input::-ms-reveal {
  display: none !important;
}

.fe_f_all .fe_c_multiselect__control {
  /* stylelint-disable declaration-block-no-duplicate-properties */
  display: inline-block;
  box-sizing: border-box;
  width: 100%;
  max-width: 100%;
  height: 35.33333px;
  margin: 0;
  padding: 6.66667px;
  padding-left: 11.66667px;
  border: 1px solid #b3b3b3;
  border-radius: 3px;
  background-color: white;
  box-shadow: unset;
  font-family: inherit;
  font-size: 16px;
  font-weight: 400;
  line-height: 1.25;
  color: #5f5f5f;
  transition: border-width 0.25s, padding 0.25s, box-shadow 0.5s, border-color 0.25s, background-color 0.25s, color 0.25s, fill 0.25s, stroke 0.25s;
  -moz-transition: box-shadow 0.5s, border-color 0.25s, background-color 0.25s, color 0.25s, fill 0.25s, stroke 0.25s;
  display: flex;
  height: auto;
  min-height: 35.33333px;
  /* stylelint-disable-next-line declaration-block-no-shorthand-property-overrides */
  padding: 2px;
  padding-bottom: 0;
  transition: none;
  /* stylelint-enable declaration-block-no-duplicate-properties */
}

.fe_f_all .fe_c_multiselect__control:hover {
  border: 2px solid #0466b4;
  box-shadow: 0 1px 8px 0 rgba(0, 0, 0, 0.25);
  padding: 5.66667px;
  padding-left: 10.66667px;
}

.fe_f_all .fe_c_multiselect__control:focus {
  box-shadow: 0 0 0 1px white, 0 0 3px 3px rgba(4, 102, 180, 0.8);
  outline: none;
  color: #333333;
}

.fe_f_all .fe_c_multiselect__control.fe_is-disabled,
.fe_f_all .fe_c_multiselect__control:disabled,
.fe_f_all .fe_c_multiselect__control[readonly] {
  background-color: #e1e1e1;
  border-color: #d9d9d9;
  color: gray;
  cursor: not-allowed;
}

.fe_f_all .fe_c_multiselect__control.fe_is-disabled:hover,
.fe_f_all .fe_c_multiselect__control:disabled:hover,
.fe_f_all .fe_c_multiselect__control[readonly]:hover {
  box-shadow: none;
}

.fe_f_all .fe_c_multiselect__control[required] {
  border-left: 6px solid #0466b4;
  padding-left: 6.66667px;
}

.fe_f_all .fe_c_multiselect__control.fe_is-error {
  border-color: #ffab00;
}

.fe_f_all .fe_c_multiselect__control:hover {
  padding: 1px;
  padding-bottom: 0;
}

.fe_f_all .fe_c_multiselect.fe_is-required .fe_c_multiselect__control {
  border-left: 6px solid #0466b4;
  padding-left: 6.66667px;
  padding-left: 2px;
}

.fe_f_all .fe_c_multiselect--is-focused .fe_c_multiselect__control {
  /* stylelint-disable declaration-block-no-duplicate-properties */
  box-shadow: 0 0 0 1px white, 0 0 3px 3px rgba(4, 102, 180, 0.8);
  outline: none;
  color: #333333;
}

.fe_f_all .fe_c_multiselect--is-focused.fe_is-required .fe_c_multiselect__control {
  padding-left: 2px;
}

.fe_f_all .fe_c_multiselect.fe_is-error .fe_c_multiselect__control {
  border-color: #ffab00;
}

.fe_f_all .fe_c_multiselect--is-disabled {
  pointer-events: visible;
}

.fe_f_all .fe_c_multiselect--is-disabled .fe_c_multiselect__control {
  background-color: #e1e1e1;
  border-color: #d9d9d9;
  color: gray;
  cursor: not-allowed;
}

.fe_f_all .fe_c_multiselect--is-disabled .fe_c_multiselect__control:hover {
  box-shadow: none;
  border-width: 1px;
  padding: 2px;
  padding-bottom: 0;
}

.fe_f_all .fe_c_multiselect--is-disabled .fe_c_multiselect__control .fe_c_multiselect__indicators {
  cursor: not-allowed;
}

.fe_f_all .fe_c_multiselect--is-disabled .fe_c_multiselect__control .fe_c_multiselect__indicators .fe_c_icon__icon--primary {
  fill: #b3b3b3;
}

.fe_f_all .fe_c_multiselect--is-disabled .fe_c_removable-tag {
  pointer-events: none;
  padding-right: 8px;
}

.fe_f_all .fe_c_multiselect--is-disabled .fe_c_removable-tag__remove {
  display: none;
}

.fe_f_all .fe_c_multiselect--is-focused.fe_is-required .fe_c_multiselect__control,
.fe_f_all .fe_c_multiselect--is-disabled.fe_is-required .fe_c_multiselect__control:hover {
  border-left-width: 6px;
}

.fe_f_all .fe_c_multiselect__indicators ~ .fe_c_multiselect__menu {
  transform: rotate(180deg);
}

.fe_f_all .fe_c_multiselect__placeholder {
  color: gray;
  position: absolute;
  top: 1px;
  left: 0;
  line-height: 1;
  max-width: 100%;
  overflow: hidden;
  padding: 7.66667px;
  padding-left: 13.66667px;
  text-overflow: ellipsis;
  transition: none;
  white-space: nowrap;
}

.fe_f_all .fe_c_multiselect__value-container > div:not(.fe_c_multiselect__placeholder) {
  display: inline-block;
  margin: 2px 0 0 3px;
  vertical-align: top;
}

.fe_f_all .fe_c_multiselect__input input {
  height: auto;
  border: none;
}

.fe_f_all .fe_c_multiselect__input input:focus {
  outline: none;
  box-shadow: none;
}

.fe_f_all .fe_c_multiselect__value-container {
  flex: 1;
  max-width: calc(100% - 24px);
  max-height: 104px;
  overflow-y: auto;
  padding: 4px 4px 0;
}

.fe_f_all .fe_c_multiselect__value-container .fe_c_removable-tag {
  margin-right: 6px;
  margin-bottom: 6px;
  max-width: calc(100% - 2px);
}

.fe_f_all .fe_c_multiselect__indicators {
  padding-bottom: 3px;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  width: 24px;
}

.fe_f_all .fe_c_multiselect__indicators .fe_c_icon__icon--primary {
  fill: #5f5f5f;
}

.fe_f_all .fe_c_multiselect__menu {
  position: absolute;
  z-index: 1001;
  width: 100%;
  padding-top: 8px;
}

.fe_f_all .fe_c_multiselect__menu-list {
  box-shadow: 0 1px 8px 0 rgba(0, 0, 0, 0.25);
  background: white;
  border: 1px solid #d9d9d9;
  max-height: 246px;
  overflow-y: auto;
}

.fe_f_all .fe_c_multiselect__option {
  min-height: 35.33333px;
  padding: 8px;
  padding-top: 1px;
  cursor: pointer;
  word-break: break-all;
}

.fe_f_all .fe_c_multiselect__option--is-focused {
  background-color: #d9ebfa;
}

.fe_f_all .fe_c_multiselect__option--is-disabled {
  cursor: not-allowed;
}

.fe_f_all .fe_c_multiselect__option .fe_c_checkbox {
  pointer-events: none;
}

.fe_f_all .fe_c_multiselect__menu-notice--no-options {
  padding: 8px;
}

.fe_f_all .fe_c_multiselect__no-options-message {
  color: gray;
  text-align: center;
}

.fe_f_all .fe_c_form-field__input-slot .fe_c_multiselect {
  width: 350px;
}

.fe_f_all .fe_c_form-field__input--large.fe_c_form-field__input--large .fe_c_multiselect {
  width: 500px;
}

.fe_f_all .fe_c_multiselect__loading-message {
  color: gray;
  text-align: center;
}

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
